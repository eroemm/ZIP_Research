h <- c(h.opt*n^(-2/15),h.opt,2*h.opt)
quan.par <- matrix(NA,nrow = m, ncol = 7)
quan.h1 <- matrix(NA,nrow = m, ncol = 7)
quan.h2 <- matrix(NA,nrow = m, ncol = 7)
quan.h3 <- matrix(NA,nrow = m, ncol = 7)
x <- runif(n)
X <- cbind(rep(1,n),x)
l <- exp(X%*%beta)
z <- sapply(1:n, function(j) rbinom(1,1,g(x[j])))
y <- sapply(1:n, function(j) ifelse(z[j]==1,0,rpois(1,l[j])))
logit.inv <- function(t)
{
.2 + .75*sin(pi*x)
}
beta <- c(.5,1)
h.opt <- .1545
## Three bandwidths - under, appropriate, over smoothing ##
h <- c(h.opt*n^(-2/15),h.opt,2*h.opt)
x <- runif(n)
X <- cbind(rep(1,n),x)
l <- exp(X%*%beta)
z <- sapply(1:n, function(j) rbinom(1,1,g(x[j])))
y <- sapply(1:n, function(j) ifelse(z[j]==1,0,rpois(1,l[j])))
logit.inv()
logit.inv
n = 200
m <- 1
g <- function(t)
{
.2 + .75*sin(pi*t)
}
logit.inv <- function(t)
{
exp(t)/(1+exp(t))
}
beta <- c(.5,1)
h.opt <- .1545
## Three bandwidths - under, appropriate, over smoothing ##
h <- c(h.opt*n^(-2/15),h.opt,2*h.opt)
quan.par <- matrix(NA,nrow = m, ncol = 7)
quan.h1 <- matrix(NA,nrow = m, ncol = 7)
quan.h2 <- matrix(NA,nrow = m, ncol = 7)
quan.h3 <- matrix(NA,nrow = m, ncol = 7)
x <- runif(n)
X <- cbind(rep(1,n),x)
l <- exp(X%*%beta)
z <- sapply(1:n, function(j) rbinom(1,1,g(x[j])))
y <- sapply(1:n, function(j) ifelse(z[j]==1,0,rpois(1,l[j])))
z
y
par <- zeroinfl(y~x)
b.hat.par <- par$coefficients$count
MSE.beta.par <- (b.hat.par - beta)^2
MSE.beta.par
logit.inv
pi.hat.par <- logit.inv(X%*%par$coefficients$zero)
rase.pi.par <- sqrt(mean((pi.hat.par - g(x))^2))
rase.pi.par
post.prob.par <- sapply(1:n, function(i) ifelse(y[i]==0, pi.hat.par[i]*(pi.hat.par[i]+(1-pi.hat.par[i])*dpois(0,exp(X[i,]%*%b.hat.par)))^-1,0))
classify.par <- ifelse(post.prob.par >= .5,1,0)
decision.par <- ifelse(classify.par == 1 && z == 1,"TP",ifelse(classify.par == 1 && z == 0,"FP",ifelse(classify.par == 0 && z == 1,"FN","TN")))
table.par <- c((table(decision.par))*m^-1)
quan.par[i,] <- c(MSE.beta.par,rase.pi.par,table.par)
c(MSE.beta.par,rase.pi.par,table.par)
table.par
table.par <- as.vector((table(decision.par))*m^-1)
quan.par[i,] <- c(MSE.beta.par,rase.pi.par,table.par)
c(MSE.beta.par,rase.pi.par,table.par)
decision.par
classify.par
decision.par <- ifelse(classify.par == 1 && z == 1,"TP",ifelse(classify.par == 1 && z == 0,"FP",ifelse(classify.par == 0 && z == 1,"FN","TN")))
decision.par
decision.par <- ifelse(classify.par =1 && z = 1,"TP",ifelse(classify.par = 1 && z = 0,"FP",ifelse(classify.par = 0 && z = 1,"FN","TN")))
decision.par <- sapply(1:n,function(i) ifelse(classify.par[i] =1 && z[i] = 1,"TP",ifelse(classify.par[i] = 1 && z[i] = 0,"FP",ifelse(classify.par[i] = 0 && z[i] = 1,"FN","TN"))))
decision.par <- sapply(1:n,function(i) ifelse(classify.par[i] == 1 && z[i] == 1,"TP",ifelse(classify.par[i] == 1 && z[i] == 0,"FP",ifelse(classify.par[i] == 0 && z[i] == 1,"FN","TN"))))
decision.par
classify.par[1]
z[1]
z[199]
classify.par[199]
table.par <- as.vector((table(decision.par))*m^-1)
table.pr
table.par
unique(decision.par)
c(MSE.beta.par,rase.pi.par,table.par)
table.par <- as.vector((table(decision.par))*n^-1)
c(MSE.beta.par,rase.pi.par,table.par)
table.par <- (table(decision.par))*n^-1
table.par
table.par$FP
table.par[1]
semizip
local.poisson.fit
c(MSE.beta.par,rase.pi.par,tryCatch(table.par[1], error = err ),tryCatch(table.par[2], error = err )
,tryCatch(table.par[3], error = err ),tryCatch(table.par[4], error = err ))
err = function(e)
{
return(0)
}
c(MSE.beta.par,rase.pi.par,tryCatch(table.par[1], error = err ),tryCatch(table.par[2], error = err )
,tryCatch(table.par[3], error = err ),tryCatch(table.par[4], error = err ))
decision.par
c(MSE.beta.par,rase.pi.par,sum(decision.par == "FN"),sum(decision.par == "FP"),sum(decision.par == "TN"),sum(decision.par=="TP"))
c(MSE.beta.par,rase.pi.par,mean(decision.par == "FN"),mean(decision.par == "FP"),mean(decision.par == "TN"),mean(decision.par=="TP"))
quan.semi <- sapply(1:3, function(j)
{
## fit model
semi.fit <- semizip(y ~ x, h = h[j],delta = .05,kernel = "Epa")
## beta estimates
b.hat.semi <- semi.fit$beta.hat
MSE.beta.semi <- (b.hat.semi - beta)^2
## mix prop estimates
pi.hat.semi <- semi.fit$pi.hat
rase.pi.semi <- sqrt(mean((pi.hat.semi - g(x))^2))
## posterior prob
post.prob.semi <- semi.fit$post.prob
classify.semi <- ifelse(post.prob.semi >= .5,1,0)
decision.semi <- sapply(1:n, function(i) ifelse(classify.semi[i] == 1 && z[i] == 1,"TP",ifelse(classify.semi[i] == 1 && z[i] == 0,"FP",ifelse(classify.semi[i] == 0 && z[i] == 1,"FN","TN"))))
return(c(MSE.beta.semi,rase.pi.semi,mean(decision.semi == "FN"),mean(decision.semi == "FP"),mean(decision.semi == "TN"),mean(decision.semi =="TP")))
})
warnings()
quan.semi[,1]
quan.semi[,2]
quan.semi[,3]
MSE.beta.par
rase.pi.par
n = 200
m <- 1
g <- function(t)
{
.2 + .75*sin(pi*t)
}
logit.inv <- function(t)
{
exp(t)/(1+exp(t))
}
beta <- c(.5,1)
h.opt <- .1545
## Three bandwidths - under, appropriate, over smoothing ##
h <- c(h.opt*n^(-2/15),h.opt,2*h.opt)
quan.par <- matrix(NA,nrow = m, ncol = 7)
quan.h1 <- matrix(NA,nrow = m, ncol = 7)
quan.h2 <- matrix(NA,nrow = m, ncol = 7)
quan.h3 <- matrix(NA,nrow = m, ncol = 7)
for(i in 1:m)
{
## generate the data
x <- runif(n)
X <- cbind(rep(1,n),x)
l <- exp(X%*%beta)
z <- sapply(1:n, function(j) rbinom(1,1,g(x[j])))
y <- sapply(1:n, function(j) ifelse(z[j]==1,0,rpois(1,l[j])))
par <- zeroinfl(y~x)
## MSE on beta for parametric
b.hat.par <- par$coefficients$count
MSE.beta.par <- (b.hat.par - beta)^2
## RASE mix prop parametric ##
pi.hat.par <- logit.inv(X%*%par$coefficients$zero)
rase.pi.par <- sqrt(mean((pi.hat.par - g(x))^2))
post.prob.par <- sapply(1:n, function(i) ifelse(y[i]==0, pi.hat.par[i]*(pi.hat.par[i]+(1-pi.hat.par[i])*dpois(0,exp(X[i,]%*%b.hat.par)))^-1,0))
classify.par <- ifelse(post.prob.par >= .5,1,0)
decision.par <- sapply(1:n,function(i) ifelse(classify.par[i] == 1 && z[i] == 1,"TP",ifelse(classify.par[i] == 1 && z[i] == 0,"FP",ifelse(classify.par[i] == 0 && z[i] == 1,"FN","TN"))))
quan.par[i,] <- c(MSE.beta.par,rase.pi.par,mean(decision.par == "FN"),mean(decision.par == "FP"),mean(decision.par == "TN"),mean(decision.par=="TP"))
quan.semi <- sapply(1:3, function(j)
{
## fit model
semi.fit <- semizip(y ~ x, h = h[j],delta = .05,kernel = "Epa")
## beta estimates
b.hat.semi <- semi.fit$beta.hat
MSE.beta.semi <- (b.hat.semi - beta)^2
## mix prop estimates
pi.hat.semi <- semi.fit$pi.hat
rase.pi.semi <- sqrt(mean((pi.hat.semi - g(x))^2))
## posterior prob
post.prob.semi <- semi.fit$post.prob
classify.semi <- ifelse(post.prob.semi >= .5,1,0)
decision.semi <- sapply(1:n, function(i) ifelse(classify.semi[i] == 1 && z[i] == 1,"TP",ifelse(classify.semi[i] == 1 && z[i] == 0,"FP",ifelse(classify.semi[i] == 0 && z[i] == 1,"FN","TN"))))
return(c(MSE.beta.semi,rase.pi.semi,mean(decision.semi == "FN"),mean(decision.semi == "FP"),mean(decision.semi == "TN"),mean(decision.semi =="TP")))
})
quan.h1[i,] <- quan.semi[,1]
quan.h2[i,] <- quan.semi[,2]
quan.h3[i,] <- quan.semi[,3]
}
warnings()
quan.h1
quan.h2
quan.h3
quan.par
mean(z == 1 && classify.par == 1)
sum(z == 1 && classify.par == 1)
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
qqplot(x)
qqnorm(x)
qqline(x)
boxplot(x)
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
x
qqline(x)
boxplot(x)
mean(x)
median(x)
x <- c(x,9000000,3000000)
qqline(x)
boxplot(x)
x <- c(x,9000,3000)
qqline(x)
x <- c(x,9000,3000)
x
qqline(x)
qqplot(x)
qqline(x)
boxplot(x)
x <- c(x,800,600)
boxplot(x)
rm(list=ls())
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
x <- c(x,800,600)
qqplot(x)
qqnorm(x)
qqline(x)
boxplot(x)
x <- c(400,360,420,525,460,350,510,425,450,430,395,415)
qqnorm(x)
qqline(x)
boxplot(x)
??ttest
t.test(x,alternative = "two.sided",mu = 400)
t.test(x,alternative = "two.sided",mu = 400)
Y = rpois(200,1)
Z = matrix(runif(200),nrow = 200,ncol = 1)
grid = matrix(seq(0,10,by = .1),nrow = )
seq(0,10,by=.1)
seq(0,1,by=.1)
matrix(seq(0,1,by=.1),nrow = 11,ncol = 1)
grid = matrix(seq(0,1,by=.1),nrow = 11,ncol = 1)
grid
h.input <- h
h = .3
n <- length(Y)
kx <- NCOL(X)
kz <- NCOL(Z)
N <- nrow(grid)
kernel = match.arg(kernel)
## For calculating Kernel Weights at each target point, input z.i, target poiint, bandwidth, and kernel type ##
kw.cal = function(t.i,t.0, h, kernel = c("Epa","Gauss","Unif"))
{
kernel = match.arg(kernel)
if(kernel == "Epa") val = prod((h^-1)*epa((t.i-t.0)*(h^-1)))
else if(kernel == "Gauss") val = prod((h^-1)*dnorm((t.i-t.0)*(h^-1)))
else val = prod((h^-1)*dunif( (t.i-t.0)*(h^-1) , -1 , 1))
return(val)
}
n <- length(Y)
kx <- NCOL(X)
kz <- NCOL(Z)
N <- nrow(grid)
N
kw <- matrix(NA,nrow = N, ncol = n)
h.test = TRUE
kw = sapply(1:N , function(i) sapply(1:n, function(j) kw.cal(Z[j,],grid[i,], h = h, kernel = "Epa")))
kw
dim(kw)
head(kw)
X
dim(X)
n
X = cbind(rep(1,n),runif(n))
X
n <- length(Y)
kw = sapply(1:N , function(i) sapply(1:n, function(j) kw.cal(Z[j,],grid[i,], h = h, kernel = kernel)))
kw = sapply(1:N , function(i) sapply(1:n, function(j) kw.cal(Z[j,],grid[i,], h = h, kernel = "Epa")))
kw
dim(kw)
Z
Z = cbind(rep(1,n),Z)
Z
zfit <- EM.poisson(Y,as.data.frame(X[,-1]),as.data.frame(Z[,-1]))
zfit
btilde.z = matrix(rep(btilde,n),nrow = m, ncol = kx, byrow = TRUE)
btilde = as.matrix(zfit$Beta.coefficients)
btilde.z = matrix(rep(btilde,n),nrow = m, ncol = kx, byrow = TRUE)
btilde.z = matrix(rep(btilde,n),nrow = N, ncol = kx, byrow = TRUE)
btilde = as.matrix(zfit$Beta.coefficients)
btilde
btilde.z = matrix(rep(btilde,N),nrow = N, ncol = kx, byrow = TRUE)
btilde.z
grid
pi.tilde = sapply(1:N, function(i)  (1 + exp(- grid[i,]%*%zfit$Gamma.coefficients))^-1)
k = 1
ll.loc.prev.z = rep(1,n)
ll.loc.new.z = rep(2,n)
x <- runif(200)
pi.x <- sin(x)
x
sort(x)
ls
sort(x)
pi.x
subset(x,x < .1)
max(subset(x,x < .1))
x.less <- max(subset(x,x < .1))
f = cbind(x,pi.x)
f
x.less <- max(subset(x,x < .1))
x.great <- min(subset(x,x > .1))
ind.less <- which(x==x.less)
ind.less
x[81]
ind.great <- which(x==x.great)
ind.great
x[196]
pi.grid <- sapply(1:9, function(j)
{
x.less <- max(subset(x,x < .1))
x.great <- min(subset(x,x > .1))
ind.less <- which(x==x.less)
ind.great <- which(x==x.great)
mean(c(pi.grid[ind.less],pi.grid[ind.great]))
})
z.grid <- seq(.1,.9,by =.1)
pi.grid <- sapply(1:9, function(j)
{
x.less <- max(subset(x,x < z.grid[j]))
x.great <- min(subset(x,x > z.grid[j]))
ind.less <- which(x==x.less)
ind.great <- which(x==x.great)
mean(c(pi.x[ind.less],pi.x[ind.great]))
})
pi.grid
length(z.grid)
2//2
2%/%2
3%/%2
0/2
is.integer(1/2)
read.csv("/home/eric/Downloads/pse.csv")
meth = read.csv("/home/eric/Downloads/pse.csv")
head(meth)
colnames(meht)
colnames(meth)
meth.2011 <- subset(meth,year == 2011)
View(meth)
ky.2011 <- subset(meth,year == 2011 && statename = "Kentucky")
ky.2011 <- subset(meth,year == 2011 & statename == "Kentucky")
View(ky.2011)
fips <- read.csv("/home/eric/Downloads/all-geocodes-v2016.xlsx")
View(fips)
fips <- read.csv("/home/eric/Downloads/all-geocodes-v2016.csv")
View(fips)
fips <- read.csv("/home/eric/Downloads/all-geocodes-v2016.csv")
View(fips)
View(ky.2011)
colnames(fips)
ky.fips <- subset(fips, State.Code..FIPS. == 21)
View(ky.fips)
ky.fips <- subset(fips, State.Code..FIPS. == 21 & County.Code..FIPS. !=0)
View(ky.2011)
county.ky <- ky.fips$Area.Name..including.legal.statistical.area.description.
head(county.ky)
View(ky.fips)
county.ky
ky.2011 <- cbind.data.frame(ky.2011,county.ky)
View(ky.2011)
strsplit(county.ky,split=" ")
strsplit(as.character(county.ky),split=" ")
strsplit(as.character(county.ky),split=" ")[1]
strsplit(as.character(county.ky),split=" ")[,,1]
strsplit(as.character(county.ky),split=" ")[,1]
a=strsplit(as.character(county.ky),split=" ")
a
a[1,1]
a[[1]]
a[[1]][1]
county.split <- strsplit(as.character(county.ky),split=" ")
county.ky = sapply(1:120,function(i) county.split[[i]][1])
county.ky
ky.2011 <- cbind.data.frame(ky.2011,county.ky)
adair.neigh = ifelse(county.ky == c("Russell","Casey"),1,0)
adair.neigh
is.character(county.ky)
adair.neigh = ifelse(county.ky == any(c("Russell","Casey")),1,0)
adair.neigh = ifelse(county.ky == "Russell" | county.ky == "Casey" | county.ky = "Taylor" | county.ky = "Green" |
county.ky == "Metcalfe" | county.ky == "Cumberland",1,0)
adair.neigh = ifelse(county.ky == "Russell" | county.ky == "Casey" | county.ky == "Taylor" | county.ky == "Green" |
county.ky == "Metcalfe" | county.ky == "Cumberland",1,0)
sum(adair.neigh)
adair.neigh
allen.neigh = ifelse(county.ky == "Monroe" | county.ky == "Barren"| county.ky == "Warren" | county.ky == "Simpson",1,0)
sum(allen.neigh)
W <- matrix(NA,nrow = 120,ncol = 120)
ifelse(county.ky == "Carlisle" | county.ky == "McCracken",0,1)
ifelse(county.ky == "Warren" | county.ky == "Allen" | county.ky == "Monroe" | county.ky == "Metcalfe"
| county.ky == "Hart"| county.ky == "Edmonson",1,0)
sum(ifelse(county.ky == "Warren" | county.ky == "Allen" | county.ky == "Monroe" | county.ky == "Metcalfe"
| county.ky == "Hart"| county.ky == "Edmonson",1,0))
28*28
Sys.getenv()
x = 4
Sys.getenv()
a = 4
Sys.getenv()
commandArgs()
a = 1
commandArgs()
library(pixmap)
install.packages(mixpap)
install.packages(pixmap)
install.packages("pixmap")
library(pixmap)
mtr <- read.pnm("MTRush.pgm")
mtr <- read.pnm("~/Downloads/coins_ascii.pgm")
class(mtr)
a <- mtr@grey
View(a)
aout <- nmf(a,50)
installed.packages("NMF")
install.packages("NMF")
library("NMF")
library(nmf)
install.packages("NMF")
library(NMF)
ky.2011$county.ky
county.ky
county.ky
setwd("~/Documents/Research/ZIP_Research/Data")
pharm = read.table("count.dat.txt")
colnames(pharm) = c("ID","VN","NE","TBV","Treatment")
pharm$Treatment = as.factor(pharm$Treatment)
pharm$VN = as.factor(pharm$VN)
library(ggplot2)
setwd("~/Documents/Research/ZIP_Research/Simulations/Code")
source("loc_one.R")
source("cv_im.R")
source("EM_poisson_function_updated.R")
#h.pot <- matrix(seq(5,21,length.out = 20),nrow=20,ncol=1)
#bs <- CV(NE ~ TBV + Treatment + Treatment:TBV|TBV,data = pharm,h=h.pot,k=5,kernel = "Epa",delta=1)
sem <- semizip(NE ~ log(TBV)+Treatment|TBV,data = pharm,h=4,delta = 1,"Gauss")
var.id <- 2.175
install.packages("statmod")
library(statmod)
pi.hat <- sem$pi.hat
b.hat <- summary(zip_ri)$coefficients$cond[,1]
library(glmmTMB)
zip_ri <- glmmTMB(NE ~ log(TBV)+Treatment+(1|ID),pharm,family = poisson , ziformula = ~ TBV)
b.hat <- summary(zip_ri)$coefficients$cond[,1]
X <- cbind(rep(1,708),log(pharm$TBV),as.numeric(pharm$Treatment==1))
log.poiss.mean <- X%*%b.hat
w<-gauss.quad.prob(10,"normal",sigma=sqrt(var.id))
like.calc <-array(NA,c(118,10,6))
zip_density <- function(p,y,lambda)
{
ifelse(y==0,p+(1-p)*exp(-lambda),(1-p)*dpois(y,lambda=lambda))
}
for(i in 1:118)
{
for(k in 1:10)
{
like.calc.next[i,k] <- prod(like.calc[i,k,])
}
}
like.calc.next = matrix(NA,nrow=118,ncol=10)
for(i in 1:118)
{
for(k in 1:10)
{
like.calc.next[i,k] <- prod(like.calc[i,k,])
}
}
final.like <- sapply(1:118, function(i) sum(w$weights*like.calc.next[i,]))
log.like.semi <- sum(log(final.like))
log.like.semi
pi.hat <- sem$pi.hat
b.hat <- summary(zip_ri)$coefficients$cond[,1]
X <- cbind(rep(1,708),log(pharm$TBV),as.numeric(pharm$Treatment==1))
log.poiss.mean <- X%*%b.hat
w<-gauss.quad.prob(10,"normal",sigma=sqrt(var.id))
like.calc <-array(NA,c(118,10,6))
zip_density <- function(p,y,lambda)
{
ifelse(y==0,p+(1-p)*exp(-lambda),(1-p)*dpois(y,lambda=lambda))
}
for(i in 1:118)
{
for(k in 1:10)
{
for(j in 1:6)
{
like.calc[i,k,j] <- zip_density(pi.hat[6*(i-1)+j],pharm$NE[6*(i-1)+j],exp(log.poiss.mean[6*(i-1)+j] + sqrt(2*var.id)*w$nodes[k]))
}
}
}
like.calc.next = matrix(NA,nrow=118,ncol=10)
for(i in 1:118)
{
for(k in 1:10)
{
like.calc.next[i,k] <- prod(like.calc[i,k,])
}
}
final.like <- sapply(1:118, function(i) sum(w$weights*like.calc.next[i,]))
log.like.semi <- sum(log(final.like))
log.like.semi
summary(zip_ri)
plot(sort(pharm$TBV),sem$pi.hat[order(pharm$TBV)])
coeff.ph <-summary(zip_ri)$coefficients$zi[,1]
plot.ph <- cbind.data.frame(z=seq(2,44,by=1))
plot.ph <-transform.data.frame(plot.ph,fit=logit.inv(coeff.ph[1]+coeff.ph[2]*z))
ggplot(plot.ph,aes(x=z,y=fit))+geom_point()
plot(z,plot.ph$fit)
plot(plot.ph$z,plot.ph$fit)
